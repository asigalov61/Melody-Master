# -*- coding: utf-8 -*-
"""Melody_Master.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EaObEbUnDVc0wNBWtXK_GWG1DvVfG5ob

# Melody Master (ver. 1.0)

***

Powered by tegridy-tools: https://github.com/asigalov61/tegridy-tools

***

#### Project Los Angeles

#### Tegridy Code 2022

***

# (SETUP)
"""

#@title Install all dependencies (run only once per session)

!git clone https://github.com/asigalov61/Melody-Master
!pip install matplotlib

#@title Import all needed modules

print('Loading core modules. Please wait...')

import os
import statistics, math
import matplotlib.pyplot as plt

print('Loading TMIDIX module...')

os.chdir('/content/Melody-Master/')
import TMIDIX

os.chdir('/content/')
print('Done!')

"""# (MELODY MASTER)"""

#@title Extract melody
full_path_to_MIDI_file = "/content/Melody-Master/Example-MIDI-1.mid" #@param {type:"string"}
mono_melody_or_chorded_melody = True #@param {type:"boolean"}
add_bass_melody = True #@param {type:"boolean"}
mono_or_chorded_bass_melody = True #@param {type:"boolean"}

print('=' * 70)
print('Melody Master')

print('=' * 70)
print('Loading MIDI file...')

score = TMIDIX.midi2ms_score(open(full_path_to_MIDI_file, 'rb').read())

events_matrix = []

itrack = 1

while itrack < len(score):
    for event in score[itrack]:
      if event[0] == 'note' and event[3] != 9:       
        events_matrix.append(event)
    itrack += 1

# Sorting...
events_matrix.sort(key=lambda x: x[4], reverse=True)
events_matrix.sort(key=lambda x: x[1])

melody_chords = []
cho = []
pe = events_matrix[0]
for e in events_matrix:
  if e[1] - pe[1] == 0:
    cho.append(e)
  else:
    if len(cho) > 0:
      melody_chords.append(cho)
    cho = []
    cho.append(e)

  pe = e # Previous event

print('=' * 70)
print('Processing...')

#==================================================
x = [y[0][1] for y in melody_chords]
melody_pitches = [y[0][4] for y in melody_chords]
mean_melody_pitch = statistics.mean(melody_pitches)

all_pitches = [y[4] for y in events_matrix]
mean_all_pitch = statistics.mean(all_pitches)

bass_pitches = [y[-1][4] for y in melody_chords if len(y) > 1]
mean_bass_pitch = statistics.mean(bass_pitches)

melody_curve = []

for i in range(len(melody_chords)):
  melody_curve.append(statistics.mean([melody_pitches[i], mean_all_pitch]))
#==================================================

melody_chords_f = []

if mono_melody_or_chorded_melody:
  for i in range(len(melody_chords)):
    if melody_chords[i][0][4] > melody_curve[i]:
      melody_chords[i][0][3] = 0
      for m in melody_chords[i][1:]:
        if add_bass_melody and m[4] < mean_bass_pitch:
          if not mono_or_chorded_bass_melody:
            m[3] = 2
          else:
            m[3] = 1
        else:
          m[3] = 1
    else:
      for m in melody_chords[i]:
        if add_bass_melody and m[4] < mean_bass_pitch:
          if not mono_or_chorded_bass_melody:
            m[3] = 2
          else:
            m[3] = 1
        else:
          m[3] = 1

    if add_bass_melody and mono_or_chorded_bass_melody:
      if melody_chords[i][-1][4] < mean_bass_pitch:
        melody_chords[i][-1][3] = 2

else:
  for i in range(len(melody_chords)):
    if melody_chords[i][0][4] > melody_curve[i]:
      for m in melody_chords[i]:
        if m[4] > melody_curve[i]:
          m[3] = 0
        else:
          if add_bass_melody and m[4] < mean_bass_pitch:
            if not mono_or_chorded_bass_melody:
              m[3] = 2
            else:
              m[3] = 1
          else:
            m[3] = 1
    else:
      for m in melody_chords[i]:
        if add_bass_melody and m[4] < mean_bass_pitch:
          if not mono_or_chorded_bass_melody:
            m[3] = 2
          else:
            m[3] = 1
        else:
          m[3] = 1

    if add_bass_melody and mono_or_chorded_bass_melody:
      if melody_chords[i][-1][4] < mean_bass_pitch:
        melody_chords[i][-1][3] = 2
#==================================================
print('=' * 70)

for m in melody_chords:
  melody_chords_f.extend(m)

TMIDIX.Tegridy_SONG_to_MIDI_Converter(melody_chords_f,
                                      output_signature='Melody Master',
                                      track_name='Project Los Angeles',
                                      number_of_ticks_per_quarter=500, 
                                      list_of_MIDI_patches=[0, 24, 32, 40, 42, 46, 56, 71, 73, 0, 0, 0, 0, 0, 0, 0], 
                                      output_file_name='/content/Melody_Master_Composition')



print('=' * 70)
print('Enjoy! :)')
print('=' * 70)

#@title Plot melody curve
NOTES_S = 0
NOTES_E = 100

plt.figure(figsize=(15, 6))
plt.plot(x[NOTES_S:NOTES_E], melody_pitches[NOTES_S:NOTES_E], 'o',x[NOTES_S:NOTES_E],  melody_curve[NOTES_S:NOTES_E])
plt.show()

"""# Congrats! You did it! :)"""